// Generated by gencpp from file demo02_sr75/RadarCluster.msg
// DO NOT EDIT!


#ifndef DEMO02_SR75_MESSAGE_RADARCLUSTER_H
#define DEMO02_SR75_MESSAGE_RADARCLUSTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo02_sr75
{
template <class ContainerAllocator>
struct RadarCluster_
{
  typedef RadarCluster_<ContainerAllocator> Type;

  RadarCluster_()
    : id(0)
    , dist_long_x(0.0)
    , dist_lat_y(0.0)
    , velocity(0.0)
    , height_z(0.0)
    , dyn_prop(0)
    , rcs(0)
    , range(0.0)
    , angle(0.0)  {
    }
  RadarCluster_(const ContainerAllocator& _alloc)
    : id(0)
    , dist_long_x(0.0)
    , dist_lat_y(0.0)
    , velocity(0.0)
    , height_z(0.0)
    , dyn_prop(0)
    , rcs(0)
    , range(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef float _dist_long_x_type;
  _dist_long_x_type dist_long_x;

   typedef float _dist_lat_y_type;
  _dist_lat_y_type dist_lat_y;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _height_z_type;
  _height_z_type height_z;

   typedef uint8_t _dyn_prop_type;
  _dyn_prop_type dyn_prop;

   typedef uint8_t _rcs_type;
  _rcs_type rcs;

   typedef float _range_type;
  _range_type range;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::demo02_sr75::RadarCluster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo02_sr75::RadarCluster_<ContainerAllocator> const> ConstPtr;

}; // struct RadarCluster_

typedef ::demo02_sr75::RadarCluster_<std::allocator<void> > RadarCluster;

typedef boost::shared_ptr< ::demo02_sr75::RadarCluster > RadarClusterPtr;
typedef boost::shared_ptr< ::demo02_sr75::RadarCluster const> RadarClusterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo02_sr75::RadarCluster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo02_sr75::RadarCluster_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo02_sr75::RadarCluster_<ContainerAllocator1> & lhs, const ::demo02_sr75::RadarCluster_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.dist_long_x == rhs.dist_long_x &&
    lhs.dist_lat_y == rhs.dist_lat_y &&
    lhs.velocity == rhs.velocity &&
    lhs.height_z == rhs.height_z &&
    lhs.dyn_prop == rhs.dyn_prop &&
    lhs.rcs == rhs.rcs &&
    lhs.range == rhs.range &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo02_sr75::RadarCluster_<ContainerAllocator1> & lhs, const ::demo02_sr75::RadarCluster_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo02_sr75

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo02_sr75::RadarCluster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo02_sr75::RadarCluster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo02_sr75::RadarCluster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe99fd61eb81690cb0da1c8e2444952c";
  }

  static const char* value(const ::demo02_sr75::RadarCluster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe99fd61eb81690cULL;
  static const uint64_t static_value2 = 0xb0da1c8e2444952cULL;
};

template<class ContainerAllocator>
struct DataType< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo02_sr75/RadarCluster";
  }

  static const char* value(const ::demo02_sr75::RadarCluster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8   id              # 目标ID，0~255循环,随机\n"
"float32 dist_long_x       # 目标纵向距离，单位：米\n"
"float32 dist_lat_y        # 目标横向距离，单位：米\n"
"float32 velocity        # 目标径向速度，单位：m/s\n"
"float32 height_z          # 目标高度，单位：米\n"
"uint8   dyn_prop        # 目标动态属性\n"
"uint8   rcs             # 目标信噪比\n"
"float32 range           # 目标径向距离R，单位：米\n"
"float32 angle           # 目标角度θ，单位：弧度\n"
;
  }

  static const char* value(const ::demo02_sr75::RadarCluster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.dist_long_x);
      stream.next(m.dist_lat_y);
      stream.next(m.velocity);
      stream.next(m.height_z);
      stream.next(m.dyn_prop);
      stream.next(m.rcs);
      stream.next(m.range);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarCluster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo02_sr75::RadarCluster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo02_sr75::RadarCluster_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dist_long_x: ";
    Printer<float>::stream(s, indent + "  ", v.dist_long_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dist_lat_y: ";
    Printer<float>::stream(s, indent + "  ", v.dist_lat_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "height_z: ";
    Printer<float>::stream(s, indent + "  ", v.height_z);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dyn_prop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dyn_prop);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "rcs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rcs);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO02_SR75_MESSAGE_RADARCLUSTER_H
