// Generated by gencpp from file demo02_sr75/candata.msg
// DO NOT EDIT!


#ifndef DEMO02_SR75_MESSAGE_CANDATA_H
#define DEMO02_SR75_MESSAGE_CANDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo02_sr75
{
template <class ContainerAllocator>
struct candata_
{
  typedef candata_<ContainerAllocator> Type;

  candata_()
    : frameid(0)
    , datalen(0)
    , data()  {
      data.assign(0);
  }
  candata_(const ContainerAllocator& _alloc)
    : frameid(0)
    , datalen(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef int32_t _frameid_type;
  _frameid_type frameid;

   typedef int32_t _datalen_type;
  _datalen_type datalen;

   typedef boost::array<int64_t, 64>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::demo02_sr75::candata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo02_sr75::candata_<ContainerAllocator> const> ConstPtr;

}; // struct candata_

typedef ::demo02_sr75::candata_<std::allocator<void> > candata;

typedef boost::shared_ptr< ::demo02_sr75::candata > candataPtr;
typedef boost::shared_ptr< ::demo02_sr75::candata const> candataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo02_sr75::candata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo02_sr75::candata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo02_sr75::candata_<ContainerAllocator1> & lhs, const ::demo02_sr75::candata_<ContainerAllocator2> & rhs)
{
  return lhs.frameid == rhs.frameid &&
    lhs.datalen == rhs.datalen &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo02_sr75::candata_<ContainerAllocator1> & lhs, const ::demo02_sr75::candata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo02_sr75

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo02_sr75::candata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo02_sr75::candata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo02_sr75::candata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo02_sr75::candata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo02_sr75::candata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo02_sr75::candata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo02_sr75::candata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "319167d56da088e6bf38f02430def806";
  }

  static const char* value(const ::demo02_sr75::candata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x319167d56da088e6ULL;
  static const uint64_t static_value2 = 0xbf38f02430def806ULL;
};

template<class ContainerAllocator>
struct DataType< ::demo02_sr75::candata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo02_sr75/candata";
  }

  static const char* value(const ::demo02_sr75::candata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo02_sr75::candata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 frameid\n"
"int32 datalen\n"
"int64[64] data\n"
;
  }

  static const char* value(const ::demo02_sr75::candata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo02_sr75::candata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frameid);
      stream.next(m.datalen);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct candata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo02_sr75::candata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo02_sr75::candata_<ContainerAllocator>& v)
  {
    s << indent << "frameid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frameid);
    s << indent << "datalen: ";
    Printer<int32_t>::stream(s, indent + "  ", v.datalen);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO02_SR75_MESSAGE_CANDATA_H
